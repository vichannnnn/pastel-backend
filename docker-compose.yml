---
version: '3.8'

services:
  backend:
    container_name: backend
    build: ./backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload
    networks:
      - internal-network
    environment:
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      DATABASE_URL: ${DATABASE_URL}
      TASK_RUNNER_DATABASE_URL: ${TASK_RUNNER_DATABASE_URL}
      MODELLING_API_URL: ${MODELLING_API_URL}
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - images-volume:/app/images

  db:
    networks:
      - internal-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      interval: 5s
      retries: 10
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
    image: postgres:14.1-alpine
    ports:
      - '5432:5432'
    restart: unless-stopped
    volumes:
      - ./postgres:/var/lib/postgresql/data
      - ./db:/docker-entrypoint-initdb.d/

  redis:
    image: redis:7.0.7-alpine
    networks:
      - internal-network
    ports:
      - "6379:6379"
    command: redis-server --loglevel verbose
    restart: unless-stopped

  scheduler:
    networks:
     - internal-network
    environment:
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
      TASK_RUNNER_DATABASE_URL: ${TASK_RUNNER_DATABASE_URL}
      MODELLING_API_URL: ${MODELLING_API_URL}
    depends_on:
      - redis
    build:
      context: ./backend
    command: celery -A app.worker worker -B --loglevel=info
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "celery inspect ping"]
    volumes:
      - ./backend:/app
      - images-volume:/app/images


  scheduler-gui:
    environment:
      CELERY_BROKER_URL: ${REDIS_URL}
    networks:
      - internal-network
    links:
      - scheduler
    ports:
      - "5555:5555"
    depends_on:
      scheduler:
        condition: service_healthy
    image: mher/flower:1.2.0
    restart: unless-stopped

  caddy:
    image: caddy:2.6.2-alpine
    networks:
      - internal-network
    ports:
      - '80:80'
      - '443:443'
      - '5173:5173'
      - '8001:8001'
      - '8002:8002'
    volumes:
      - images-volume:/srv
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config


volumes:
  images-volume:
  caddy_config: null
  caddy_data: null

networks:
  internal-network:
    name: internal-network
    driver: bridge

